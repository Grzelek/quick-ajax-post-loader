{
    "shortcodes": {
        "title": "<h4>Using Shortcodes for AJAX Content Loading</h4>",
        "content": "<h4>What Are Shortcodes?</h4>\r\n\r\nThe <strong>Quick Ajax Post Loader</strong> plugin enables the creation of shortcodes that allow for the dynamic display of posts in WordPress using AJAX. This eliminates the need to refresh the page, providing a seamless content browsing experience.\r\n\r\n<h4>Why Use Shortcodes?</h4>\r\n\r\nShortcodes are a powerful way to dynamically load posts on your WordPress site.  \r\nThey allow you to integrate AJAX-based functionality into pages or posts with minimal effort.\r\n\r\n<h4>Example Shortcode</h4>\r\n\r\n<strong><code class=\"code-tag\">[qapl-quick-ajax id='1' title='My Ajax']</code></strong>\r\n\r\n<h4>Steps to Create a Shortcode</h4>\r\n\r\n<li>Navigate to <strong>Quick Ajax > Shortcodes</strong> or click <strong>Add New</strong> in the WordPress admin panel.</li>\r\n<li>Configure the settings:</li>\r\n   - Choose the <strong>post type</strong> to display (e.g., posts, pages, or custom post types).\r\n   - Add <strong>taxonomy filters</strong> to allow users to filter content dynamically.\r\n   - Customize <strong>display options</strong>, such as layout, grid structure, and loading icons.\r\n<li>Save the configuration.</li>\r\n<li>Copy the generated shortcode.</li>\r\n<li>Paste the shortcode into any page or post to enable AJAX-based content loading.</li>\r\n\r\n<h4>Important Notes</h4>\r\n\r\n- The actual shortcode will depend on the settings you configure in the plugin interface.\r\n- Always verify the functionality of the shortcode on your site to ensure it matches the desired behavior.\r\n\r\n<h4>Quick Access</h4>\r\n\r\nNavigate to Quick Ajax > Shortcodes, configure the settings, and copy the generated shortcode."
    },
    "custom_templates": {
        "title": "<h4>Creating and Using Custom Post Templates</h4>",
        "content": "The <strong>Quick Ajax Post Loader</strong> plugin allows you to override the default post template or create your own custom templates to personalize the appearance and behavior of dynamically loaded posts.\r\n\r\n<h4>Steps to Create a Custom Template</h4>\r\n\r\n<li>Navigate to the directory:</li>\r\n\twp-content/themes/your-active-theme/quick-ajax-post-loader/templates/post-items/\r\n<li>To override the default template:</li>\r\n\t- Create a file named <code class=\"code-tag\">post-item.php</code> in the directory above. This file will replace the default template provided by the plugin.\r\n<li>To create additional custom templates:</li>\r\n\t- Use the naming convention <code class=\"code-tag\">post-item-*.php</code> (e.g., <code class=\"code-tag\">post-item-custom-name.php</code>).\r\n\t- Add a comment at the top of the file to specify the template name, e.g.:\r\n\t  \r\n\t\t/<em> Post Item Name: My Custom Template </em>/\r\n\t  \r\n\t- If the comment is missing, the file name (without the <code class=\"code-tag\">.php</code> extension) will be displayed as the template name in the admin panel.\r\n<li>Save the file in the specified directory. The plugin will automatically detect it and make it available for selection in the shortcode configuration.</li>\r\n\r\n<h4>Example Template Code</h4>\r\n\r\n\t<?php\r\n\t/<em> Post Item Name: My Custom Template </em>/\r\n\t?>\r\n\t<div class=\"qapl-post-item\">  \r\n\t\t<a href=\"<?php echo get_permalink(); ?>\">\r\n\t\t\t<h2><?php the_title(); ?></h2>\r\n\t\t\t<!-- Add custom post elements, e.g., thumbnail or excerpt -->\r\n\t\t</a>\r\n\t</div>\r\n\r\n<h4>Template Selection</h4>\r\n\r\n- All templates created in the specified directory will be detected automatically by the plugin.\r\n- Templates will appear as selectable options in the shortcode configuration.\r\n\r\n<h4>Template File Naming Rules</h4>\r\n\r\n- <strong>Default Template</strong>:\r\n\t- File name: <code class=\"code-tag\">post-item.php</code>.\r\n\t- Location: <code class=\"code-tag\">wp-content/themes/your-active-theme/quick-ajax-post-loader/templates/post-items/</code>.\r\n\r\n- <strong>Custom Templates</strong>:\r\n\t- File names must start with <code class=\"code-tag\">post-item</code>, e.g., <code class=\"code-tag\">post-item-custom-name.php</code>.\r\n\t- The naming convention ensures that the plugin recognizes the files as additional templates.\r\n\r\n<h4>Customizing the \"No Posts\" Message</h4>\r\n\r\nTo customize the message displayed when there are no posts to show:\r\n\r\n<li>Create a file named <code class=\"code-tag\">no-posts.php</code>.</li>\r\n<li>Place it in the directory:</li>\r\n\twp-content/themes/your-active-theme/quick-ajax-post-loader/templates/post-items/\r\n<li>Add your custom HTML or message to this file.</li>\r\n\r\n<h4>Template Loading Order</h4>\r\n\r\n<li><strong>Child Theme</strong></li>\r\n<li><strong>Parent Theme</strong></li>\r\n<li><strong>Plugin Defaults</strong></li>\r\n\r\nThis hierarchy ensures that customizations in the child theme are prioritized, safeguarding changes from being overwritten during updates."
    },
    "custom_taxonomy_filters": {
        "title": "<h4>Modifying Taxonomy Filter Buttons for Custom Styling</h4>",
        "content": "The <strong>Quick Ajax Post Loader</strong> plugin allows you to customize the appearance and functionality of taxonomy filter buttons by overriding the <code class=\"code-tag\">taxonomy-filter-button.php</code> file. These buttons are used to filter posts by categories, tags, or other taxonomies.\r\n\r\n<h4>Steps to Customize</h4>\r\n\r\n<li>Navigate to the directory:</li>\r\n\twp-content/themes/your-active-theme/quick-ajax-post-loader/templates/taxonomy-filter/\r\n<li>Create a file named <code class=\"code-tag\">taxonomy-filter-button.php</code>.</li>\r\n<li>Edit the file to modify the button's HTML structure, CSS classes, or attributes.</li>\r\n\r\n<h4>Example Filter Button Code</h4>\r\n\r\n\t<button type=\"button\" class=\"qapl-filter-button custom-class\" data-button=\"quick-ajax-filter-button\">QUICK_AJAX_LABEL</button>\r\n\r\nIn this example:\r\n- <strong><code class=\"code-tag\">QUICK_AJAX_LABEL</code></strong>: A dynamic label that changes based on the taxonomy being filtered.\r\n- <strong><code class=\"code-tag\">data-button=\"quick-ajax-filter-button\"</code></strong>: This attribute is essential for integration with the plugin's AJAX filtering logic, ensuring dynamic content updates without page reloads."
    },
    "custom_loading_icons": {
        "title": "<h4>Creating and Overriding Custom Loading Icons</h4>",
        "content": "The <strong>Quick Ajax Post Loader</strong> plugin allows you to customize loading icons by creating your own templates. These icons can include HTML, CSS animations, or GIFs, and they will be available for selection in the plugin configuration.\r\n\r\n<h4>Steps to Create a Custom Loading Icon</h4>\r\n\r\n<li>Navigate to the directory:</li>\r\n\twp-content/themes/your-active-theme/quick-ajax-post-loader/templates/loader-icon/\r\n<li>Create a file with a descriptive name, e.g., <code class=\"code-tag\">loader-icon-custom-loader.php</code>.</li>\r\n<li>Add your custom HTML, CSS, or JavaScript code for the loading icon.</li>\r\n\r\n<h4>Example Loading Icon Code</h4>\r\n\r\n\t<?php\r\n\t/<em> Loader Icon Name: Custom Loader </em>/\r\n\t?>\r\n\t<div class=\"qapl-loader-custom\">\r\n\t\t<!-- Add your custom HTML, CSS, or animations here -->\r\n\t\t<img src=\"images/loader_image.gif\" alt=\"Loading...\" />\r\n\t\t<!-- Example CSS animation -->\r\n\t\t<div class=\"loader-dot\"></div>\r\n\t\t<div class=\"loader-dot\"></div>\r\n\t\t<div class=\"loader-dot\"></div>\r\n\t</div>\r\n\r\n<h4>Rules for Overriding and Loading Icons</h4>\r\n\r\n<li><strong>Directory Placement</strong>: Place the custom loading icon file in the child theme or theme directory:</li>\r\n\twp-content/themes/your-active-theme/quick-ajax-post-loader/templates/loader-icon/\r\n<li><strong>Template Detection</strong>: The plugin will automatically detect all files in this directory as available loading icons.</li>\r\n<li><strong>Loading Order</strong>: The plugin follows this hierarchy to load templates:</li>\r\n\t- <strong>Child Theme</strong>\r\n\t- <strong>Parent Theme</strong>\r\n\t- <strong>Plugin Defaults</strong>\r\n\r\nThis ensures that custom loading icons in the child theme take priority and are not overwritten during theme or plugin updates."
    },
    "template_filters": {
        "title": "<h4>Template Filters for Customizing Quick Ajax Post Loader</h4>",
        "content": "<h4>Description</h4>\r\n\r\nThe template filters available through <code class=\"code-tag\">apply_filters</code> in <strong>Quick Ajax Post Loader</strong> allow you to customize the HTML output of various template components. These filters give you the flexibility to modify the rendered output for date, image, title, excerpt, read more, and load more button elements.\r\n\r\n<h4>Available Template Filters</h4>\r\n\r\n- <code class=\"code-tag\">qapl_template_post_item_date</code>: Filter the HTML output for the post date element.\r\n- <code class=\"code-tag\">qapl_template_post_item_image</code>: Filter the HTML output for the post image element.\r\n- <code class=\"code-tag\">qapl_template_post_item_title</code>: Filter the HTML output for the post title element.\r\n- <code class=\"code-tag\">qapl_template_post_item_excerpt</code>: Filter the HTML output for the post excerpt element.\r\n- <code class=\"code-tag\">qapl_template_post_item_read_more</code>: Filter the HTML output for the \"read more\" element.\r\n- <code class=\"code-tag\">qapl_template_load_more_button</code>: Filter the HTML output for the load more button element.\r\n\r\n<h4>How to Use</h4>\r\n\r\nYou can modify the template output by hooking into these filters using the <code class=\"code-tag\">add_filter()</code> function.\r\nFor example, to change the post title markup, add the following code:\r\n\r\n<h4>Example: Customizing the Post Date Format</h4>\r\n\r\n\tfunction custom_qapl_date($output, $template, $quick_ajax_id) {\r\n\t\tif ($template === 'post-item') { // Apply only to the default 'post-item' template\r\n\t\t\t$new_date = get_the_date('d-m-Y'); // Change the date format to 'd-m-Y'\r\n\t\t\t$output = '<div class=\"qapl-post-date\"><span> Date: ' . esc_html($new_date) . '</span></div>';\r\n\t\t}\r\n\t\treturn $output;\r\n\t}\r\n\tadd_filter('qapl_template_post_item_date', 'custom_qapl_date', 10, 3);\r\n\r\n<h4>Example: Customizing the Post Title for a Specific Container</h4>\r\n\r\n\tfunction custom_qapl_title($output, $template, $quick_ajax_id) {\r\n\t\tif ($quick_ajax_id === 'p963') { // Apply only to the container with ID 'p963'\r\n\t\t\t$output = '<div class=\"qapl-post-title\"><h5> Title: ' . esc_html(get_the_title()) . '</h5></div>';\r\n\t\t}\r\n\t\treturn $output;\r\n\t}\r\n\tadd_filter('qapl_template_post_item_title', 'custom_qapl_title', 10, 3);\r\n\r\nUsing the appropriate filters makes it easy to customize different aspects of the plugin's template rendering process."
    },
    "ajax_function_generator": {
        "title": "<h4>Generating AJAX Functions with the Function Generator</h4>",
        "content": "The <strong>Quick Ajax Post Loader</strong> plugin includes an <strong>AJAX Function Generator</strong> tool available in the <strong>Quick Ajax > Settings & Features</strong> menu under the \"Function Generator\" tab. This tool generates PHP code that can be directly implemented in theme files to dynamically load posts and taxonomies via AJAX.\r\n\r\n<h4>Steps to Use</h4>\r\n\r\n<li>Navigate to <strong>Quick Ajax > Settings & Features</strong> and open the \"Function Generator\" tab.</li>\r\n<li>Configure the required parameters, such as:</li>\r\n   - <strong>Query arguments</strong>: Define the post type, number of posts, taxonomy, etc.\r\n   - <strong>Attributes</strong>: Set grid layout options, loader icon, custom CSS classes, etc.\r\n<li>Copy the generated PHP code.</li>\r\n<li>Paste the code into your theme file (e.g., <code class=\"code-tag\">page.php</code>, <code class=\"code-tag\">single.php</code>, or a custom template) where you want the dynamic content to appear.</li>\r\n\r\n<h4>Example Implementation</h4>\r\n\r\nBelow is an example of the code generated by the AJAX Function Generator, demonstrating the integration of a post grid and taxonomy filter:\r\n\r\n\t<?php\r\n\t// Define AJAX query parameters for 'post' type posts.\r\n\t$quick_ajax_args = array(\r\n\t\t'post_type' => 'post',\r\n\t\t'post_status' => 'publish',\r\n\t\t'posts_per_page' => 6,\r\n\t\t'orderby' => 'date',\r\n\t\t'order' => 'DESC',\r\n\t\t'post__not_in' => array(3, 66),\r\n\t\t'ignore_sticky_posts' => 1,\r\n\t);\r\n\r\n\t// Define attributes for AJAX.\r\n\t$quick_ajax_attributes = array(\r\n\t\t'quick_ajax_id' => 8250,\r\n\t\t'quick_ajax_css_style' => 1,\r\n\t\t'grid_num_columns' => 3,\r\n\t\t'post_item_template' => 'post-item',\r\n\t\t'taxonomy_filter_class' => 'class-taxonomy filter-class',\r\n\t\t'container_class' => 'container-class',\r\n\t\t'loader_icon' => 'loader-icon'\r\n\t);\r\n\r\n\t// Set the taxonomy for filtering posts.\r\n\t$quick_ajax_taxonomy = 'category';\r\n\r\n\t// Render the navigation for 'category' taxonomy.\r\n\tif(function_exists('qapl_render_taxonomy_filter')):\r\n\t\tqapl_render_taxonomy_filter(\r\n\t\t\t$quick_ajax_args,\r\n\t\t\t$quick_ajax_attributes,\r\n\t\t\t$quick_ajax_taxonomy\r\n\t\t);\r\n\tendif;\r\n\r\n\t// Render the grid for 'post' type posts.\r\n\tif(function_exists('qapl_render_post_container')):\r\n\t\tqapl_render_post_container(\r\n\t\t\t$quick_ajax_args,\r\n\t\t\t$quick_ajax_attributes\r\n\t\t);\r\n\tendif;"
    },
    "key_functions": {
        "title": "<h4>Key Functions</h4>",
        "content": "<h4>Rendering Post Grids with <code class=\"code-tag\">qapl_render_post_container</code> Function</h4>\n\n\r\n<p>Description</p>\r\nThe <code class=\"code-tag\">qapl_render_post_container</code> function is designed to render a dynamic post grid in WordPress using AJAX technology. It allows for the display of posts of a specific type without needing to reload the page, significantly improving user experience and performance.\r\n\r\n<p>Parameters</p>\r\n\r\n- <strong><code class=\"code-tag\">$quick_ajax_args</code> (array)</strong>: Defines the query parameters for selecting posts.\r\n- <strong><code class=\"code-tag\">$quick_ajax_attributes</code> (array)</strong>: Configures the appearance and behavior of the post grid.\n\n<p>Example Usage</p>\r\n\r\n\t<?php\r\n\t// Define AJAX query parameters for posts\r\n\t$quick_ajax_args = array(\r\n\t\t'post_type' => 'post',\r\n\t\t'post_status' => 'publish',\r\n\t\t'posts_per_page' => 6,\r\n\t\t'orderby' => 'date',\r\n\t\t'order' => 'DESC',\r\n\t\t'post__not_in' => array(3, 66, 100),\r\n\t);\r\n\r\n\t// Define attributes for the AJAX post grid\r\n\t$quick_ajax_attributes = array(\r\n\t\t'quick_ajax_id' => 12056,\r\n\t\t'quick_ajax_css_style' => 1,\r\n\t\t'grid_num_columns' => 3,\r\n\t\t'post_item_template' => 'post-item-custom-name',\r\n\t\t'taxonomy_filter_class' => 'class-one class-two',\r\n\t\t'container_class' => 'class-one class-two',\r\n\t\t'load_more_posts' => 4,\r\n\t\t'loader_icon' => 'loader-icon-quick-ajax-dot'\r\n\t);\r\n\r\n\t// Render the AJAX post grid\r\n\tif(function_exists('qapl_render_post_container')):\r\n\t\tqapl_render_post_container(\r\n\t\t\t$quick_ajax_args,\r\n\t\t\t$quick_ajax_attributes\r\n\t\t);\r\n\tendif;\n\n<p>Notes</p>\r\n- Ensure that the <code class=\"code-tag\">$quick_ajax_args</code> array is configured according to the posts you want to display.\r\n- Customize <code class=\"code-tag\">$quick_ajax_attributes</code> to match the appearance and functionality requirements of your site.\r\n- This function relies on the <strong>Quick Ajax Post Loader</strong> plugin being active and properly configured.\n\n<h4>Implementing Taxonomy Filters with <code class=\"code-tag\">qapl_render_taxonomy_filter</code> Function</h4>\n\n\r\n<p>Description</p>\r\nThe <code class=\"code-tag\">qapl_render_taxonomy_filter</code> function enables dynamic loading and updating of posts based on selected taxonomy, such as categories or tags, without reloading the entire page. It is an essential tool for creating interactive, filterable post lists in WordPress using AJAX.\r\n\r\n<p>Parameters</p>\r\n\r\n- <strong><code class=\"code-tag\">$quick_ajax_args</code> (array)</strong>: Defines the query parameters for selecting posts.\r\n- <strong><code class=\"code-tag\">$quick_ajax_attributes</code> (array)</strong>: Configures the appearance and behavior of the taxonomy filter and post grid.\r\n- <strong><code class=\"code-tag\">$quick_ajax_taxonomy</code> (string)</strong>: Specifies the taxonomy used for filtering posts, e.g., <code class=\"code-tag\">'category'</code> or <code class=\"code-tag\">'tag'</code>.\n\n<p>Example Usage</p>\r\n\r\n\t<?php\r\n\t// Define AJAX query parameters for posts\r\n\t$quick_ajax_args = array(\r\n\t\t'post_type' => 'post',\r\n\t\t'post_status' => 'publish',\r\n\t\t'posts_per_page' => 6,\r\n\t\t'orderby' => 'date',\r\n\t\t'order' => 'DESC',\r\n\t\t'post__not_in' => array(3, 66, 100),\r\n\t);\r\n\r\n\t// Define attributes for the AJAX taxonomy filter\r\n\t$quick_ajax_attributes = array(\r\n\t\t'quick_ajax_id' => 12056,\r\n\t\t'quick_ajax_css_style' => 1,\r\n\t\t'grid_num_columns' => 3,\r\n\t\t'post_item_template' => 'post-item-custom-name',\r\n\t\t'taxonomy_filter_class' => 'class-one class-two',\r\n\t\t'container_class' => 'class-one class-two',\r\n\t\t'load_more_posts' => 4,\r\n\t\t'loader_icon' => 'loader-icon-quick-ajax-dot',\r\n\t);\r\n\r\n\t// Specify the taxonomy to filter by\r\n\t$quick_ajax_taxonomy = 'category';\r\n\r\n\t// Render the AJAX taxonomy filter\r\n\tif (function_exists('qapl_render_taxonomy_filter')):\r\n\t\tqapl_render_taxonomy_filter(\r\n\t\t\t$quick_ajax_args,\r\n\t\t\t$quick_ajax_attributes,\r\n\t\t\t$quick_ajax_taxonomy\r\n\t\t);\r\n\tendif;\n\n<p>Notes</p>\r\n- Ensure that the <code class=\"code-tag\">$quick_ajax_args</code> array is configured to select the desired posts for filtering.\r\n- Use <code class=\"code-tag\">$quick_ajax_attributes</code> to customize the appearance and behavior of the taxonomy filter and post grid.\r\n- The <code class=\"code-tag\">$quick_ajax_taxonomy</code> parameter should match the taxonomy you wish to use for filtering, such as <code class=\"code-tag\">'category'</code> or <code class=\"code-tag\">'tag'</code>."
    },
    "parameter_descriptions": {
        "title": "<h4>Understanding Key Parameters in Quick Ajax Post Loader</h4>",
        "content": "<h4>Configuring AJAX Queries with <code class=\"code-tag\">$quick_ajax_args</code> parameter</h4>\n\n\r\n<p>Description</p>\r\nThe <code class=\"code-tag\">$quick_ajax_args</code> parameter is crucial for configuring AJAX queries in the <strong>Quick Ajax Post Loader</strong> plugin. It allows for detailed specification of which posts to load and display in a post grid or using taxonomic filters, providing a dynamic and interactive user experience.\r\n\r\n<p>Application</p>\r\nThe <code class=\"code-tag\">$quick_ajax_args</code> parameter is utilized in functions such as <code class=\"code-tag\">qapl_render_post_container</code> and <code class=\"code-tag\">qapl_render_taxonomy_filter</code>.\r\nIt enables flexible and advanced content management without the need for page reloads.\n\n<p>Parameters</p>\r\n- <strong><code class=\"code-tag\">post_type</code> (string)</strong>: Type of posts to load, e.g., <code class=\"code-tag\">'post'</code>, <code class=\"code-tag\">'page'</code>, or custom post types.\r\n- <strong><code class=\"code-tag\">post_status</code> (string)</strong>: Status of posts to display, e.g., <code class=\"code-tag\">'publish'</code>.\r\n- <strong><code class=\"code-tag\">posts_per_page</code> (int)</strong>: Number of posts to display per page.\r\n- <strong><code class=\"code-tag\">orderby</code> (string)</strong>: Criterion for sorting posts, e.g., <code class=\"code-tag\">'date'</code>, <code class=\"code-tag\">'title'</code>.\r\n- <strong><code class=\"code-tag\">order</code> (string)</strong>: Order of post sorting, e.g., <code class=\"code-tag\">'ASC'</code>, <code class=\"code-tag\">'DESC'</code>.\r\n- <strong><code class=\"code-tag\">post__not_in</code> (array)</strong>: An array of post IDs to exclude from the query.\n\n<h4>Customizing Display and Behavior with <code class=\"code-tag\">$quick_ajax_attributes</code> parameter</h4>\n\n\r\n<p>Description</p>\r\nThe <code class=\"code-tag\">$quick_ajax_attributes</code> parameter is used to configure the appearance and behavior options of post grids and taxonomy filters in the <strong>Quick Ajax Post Loader</strong> plugin for WordPress. It enables the customization of styles, number of columns, container classes, and other attributes that affect how dynamically loaded content is displayed and functions.\r\n\r\n<p>Application</p>\r\nThe <code class=\"code-tag\">$quick_ajax_attributes</code> parameter is crucial when using functions such as <code class=\"code-tag\">qapl_render_post_container</code> and <code class=\"code-tag\">qapl_render_taxonomy_filter</code>, enabling detailed personalization of AJAX-loaded content.\n\n<p>Parameters</p>\r\n- <strong><code class=\"code-tag\">quick_ajax_id</code> (int)</strong>: A unique identifier for the AJAX instance, allowing multiple independent grids on the same page.\r\n- <strong><code class=\"code-tag\">quick_ajax_css_style</code> (int)</strong>: Enables or disables built-in Quick Ajax CSS styles.\r\n    - <code class=\"code-tag\">0</code>: Disable default styles.\r\n    - <code class=\"code-tag\">1</code>: Enable default styles.\r\n- <strong><code class=\"code-tag\">grid_num_columns</code> (int)</strong>: Specifies the number of columns in the post grid.\r\n- <strong><code class=\"code-tag\">post_item_template</code> (string)</strong>: Allows for the selection of a post template, e.g., <code class=\"code-tag\">'post-item-custom-name'</code> for a custom template (file name without the <code class=\"code-tag\">.php</code> extension).\r\n- <strong><code class=\"code-tag\">taxonomy_filter_class</code> (string)</strong>: Adds custom CSS classes to the taxonomy filter.\r\n- <strong><code class=\"code-tag\">container_class</code> (string)</strong>: Adds custom CSS classes to the post grid container.\r\n- <strong><code class=\"code-tag\">load_more_posts</code> (int)</strong>: Specifies the number of posts to load upon clicking the \"Load More\" button.\r\n- <strong><code class=\"code-tag\">loader_icon</code> (int)</strong>: Allows for the selection of a loading icon.\r\n- <strong><code class=\"code-tag\">ajax_initial_load</code> (int)</strong>: Enables loading the initial set of posts via AJAX when the page loads.\r\n  This helps to ensure that post data is always up-to-date, especially in cases where caching might display outdated content."
    },
    "available_actions": {
        "title": "<h4>Action Hooks for Customizing Quick Ajax Post Loader</h4>",
        "content": "The <strong>Quick Ajax Post Loader</strong> plugin provides several action hooks that allow developers to customize the behavior and rendering of various elements, such as filters, post grids, and loading icons. These hooks enable greater flexibility and extend the plugin's functionality.\r\n\r\n<h4>Available Hooks</h4>\r\n\r\n<p>Filter Wrapper Hooks</p>\r\n- <strong><code class=\"code-tag\">qapl_filter_container_before</code></strong>: Executes before rendering the AJAX filter wrapper. Ideal for adding custom HTML before the wrapper.\r\n- <strong><code class=\"code-tag\">qapl_filter_container_start</code></strong>: Executes at the start of the AJAX filter wrapper rendering. Allows for inserting content at the beginning of the wrapper.\r\n- <strong><code class=\"code-tag\">qapl_filter_container_end</code></strong>: Executes at the end of the AJAX filter wrapper rendering. Enables adding content just before closing the wrapper.\r\n- <strong><code class=\"code-tag\">qapl_filter_container_after</code></strong>: Executes after rendering the AJAX filter wrapper.\r\n\r\n<p>Posts Wrapper Hooks</p>\r\n- <strong><code class=\"code-tag\">qapl_posts_container_before</code></strong>: Executes before rendering the AJAX posts wrapper.\r\n- <strong><code class=\"code-tag\">qapl_posts_container_start</code></strong>: Executes right after opening the posts wrapper. Ideal for inserting content at the beginning of the posts section.\r\n- <strong><code class=\"code-tag\">qapl_posts_container_end</code></strong>: Executes just before closing the posts wrapper. Allows for adding content at the end of the posts section.\r\n- <strong><code class=\"code-tag\">qapl_posts_container_after</code></strong>: Executes after rendering the AJAX posts wrapper.\r\n\r\n<p>Loader Icon Hooks</p>\r\n- <strong><code class=\"code-tag\">qapl_loader_before</code></strong>: Executes before rendering the loading icon.\r\n- <strong><code class=\"code-tag\">qapl_loader_after</code></strong>: Executes after rendering the loading icon.\r\n\r\n<h4>How to Use</h4>\r\n\r\nYou can add your own actions using the <code class=\"code-tag\">add_action()</code> function. Below is an example of how to add custom content before the AJAX filter wrapper:\r\n\r\n\tadd_action('qapl_filter_container_before', function($quick_ajax_id) {\r\n\t    echo '<div class=\"custom-content\"></div>';\r\n\t}, 10, 1);\r\n\r\n<h4>Example Usage</h4>\r\n\r\nAdd the following code to your theme or plugin to customize a specific part of the plugin's operation:\r\n\r\n\t<?php\r\n\tadd_action('qapl_filter_container_before', function($quick_ajax_id) {\r\n\t\t// this will apply only to the container with id 'p963'\r\n\t\tif ($quick_ajax_id === 'p963') {\r\n\t\t\techo 'Custom text before the filter navigation';\r\n\t\t}\r\n\t}, 10, 1);\r\n\r\n\tadd_action('qapl_posts_container_end', function($quick_ajax_id) {\r\n\t\t// this action will apply to all containers because there is no condition checking the container id\r\n\t    echo '<p>Additional content at the end of the posts section</p>';\r\n\t}, 10, 1);\r\n\r\n\r\n<p>Finding the <code class=\"code-tag\">quick_ajax_id</code></p>\r\n- The <code class=\"code-tag\">quick_ajax_id</code> is derived from the <code class=\"code-tag\">id</code> attribute of the outer <code class=\"code-tag\"><div></code> containing the AJAX buttons.\r\n- Example:\r\n\r\n\t\t<div id=\"quick-ajax-p963\" class=\"quick-ajax-posts-container\">\r\n\r\n  In this case, the <code class=\"code-tag\">quick_ajax_id</code> is <code class=\"code-tag\">\"p963\"</code>.\r\n- For debugging, you can use <code class=\"code-tag\">print_r($quick_ajax_id)</code> inside your modifying function to inspect the identifier during development.\r\n  Avoid exposing this information in a production environment.\r\n\n\n<h4>Notes  </h4>\r\n- These hooks are designed to provide maximum flexibility for developers.\r\n- Test your custom actions to ensure they do not conflict with other plugins or themes.\r\n- Use these hooks responsibly to maintain the performance and usability of your site."
    },
    "available_filters": {
        "title": "<h4>Filter Hooks for Customizing Quick Ajax Post Loader</h4>",
        "content": "The <strong>Quick Ajax Post Loader</strong> plugin provides several filters to customize the behavior and appearance of AJAX-driven features. Below are the key filters, their descriptions, and examples of how to use them.\r\n\r\n---\r\n\r\n<h4><code class=\"code-tag\">qapl_modify_posts_query_args</code> Filter</h4>\r\n\r\n<p>Description</p>\r\nThe <code class=\"code-tag\">qapl_modify_posts_query_args</code> filter allows for the customization of <code class=\"code-tag\">WP_Query</code> arguments used in the Quick Ajax Post Loader plugin.\r\nThis enables precise control over AJAX query results, tailoring them to meet the specific needs of your site.\r\n\r\n<p>Example Usage</p>\r\n\r\n\tadd_filter('qapl_modify_posts_query_args', function($args, $quick_ajax_id) {\r\n\t    // Use the AJAX identifier to modify query arguments\r\n\t    if ($quick_ajax_id === 'p963') {\r\n\t        $args['posts_per_page'] = 5; // Limit to 5 posts per page\r\n\t    }\r\n\t    return $args;\r\n\t}, 10, 2);\r\n\r\n<p>Finding the <code class=\"code-tag\">quick_ajax_id</code></p>\r\n- The <code class=\"code-tag\">quick_ajax_id</code> is derived from the <code class=\"code-tag\">id</code> attribute of the outer <code class=\"code-tag\"><div></code> containing the AJAX buttons.\r\n- Example:\r\n\r\n\t\t<div id=\"quick-ajax-p963\" class=\"quick-ajax-posts-container\">\r\n\r\n  In this case, the <code class=\"code-tag\">quick_ajax_id</code> is <code class=\"code-tag\">\"p963\"</code>.\r\n- For debugging, you can use <code class=\"code-tag\">print_r($quick_ajax_id)</code> inside your modifying function to inspect the identifier during development.\r\n  Avoid exposing this information in a production environment.\r\n\r\n---\r\n\r\n<h4><code class=\"code-tag\">qapl_modify_taxonomy_filter_buttons</code> Filter</h4>\r\n\r\n<p>Description</p>\r\nThe <code class=\"code-tag\">qapl_modify_taxonomy_filter_buttons</code> filter allows customization of taxonomy filter buttons used to filter content dynamically.\r\nDevelopers can modify properties such as button labels and styles, providing tailored user experiences.\r\n\r\n<p>Example Usage</p>\r\n\r\n\tadd_filter('qapl_modify_taxonomy_filter_buttons', function($buttons, $quick_ajax_id) {\r\n\t    foreach ($buttons as &$button) {\r\n\t        if ($quick_ajax_id === 'p963') {\r\n\t            // Customize \"Show All\" button label\r\n\t            if ($button['term_id'] === 'none') {\r\n\t                $button['button_label'] = 'View All'; // Change to \"View All\"\r\n\t            } else {\r\n\t                // Convert labels of other buttons to uppercase\r\n\t                $button['button_label'] = strtoupper($button['button_label']);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    return $buttons;\r\n\t}, 10, 2);\r\n\r\n<p>Finding the <code class=\"code-tag\">quick_ajax_id</code></p>\r\n- The <code class=\"code-tag\">quick_ajax_id</code> can be found in the <code class=\"code-tag\">id</code> attribute of the outer <code class=\"code-tag\"><div></code> containing the taxonomy filter buttons.\r\n- Example:\r\n\r\n\t\t<div id=\"quick-ajax-filter-p963\" class=\"quick-ajax-filter-container\">\r\n\r\n  In this case, the <code class=\"code-tag\">quick_ajax_id</code> is <code class=\"code-tag\">\"p963\"</code>.\r\n- For debugging purposes, you can use <code class=\"code-tag\">print_r($quick_ajax_id)</code> to inspect the identifier while working on modifications.\r\n  Avoid exposing this information to end users in a production environment."
    }
}